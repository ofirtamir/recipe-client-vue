{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nexport default {\n  // mounted() {\n  //   this.axios.get(this.recipe.image).then((i) => {\n  //     this.image_load = true;\n  //   });\n  // },\n  data: function data() {\n    return {\n      image_load: true,\n      isFavorite: this.getFavoriteState(this.recipe),\n      isViewed: this.checkIfViewed(this.recipe.id)\n    };\n  },\n  name: 'RecipePreviewCard',\n  props: {\n    recipe: {\n      type: Object,\n      required: true\n    }\n\n    // id: {\n    //   type: Number,\n    //   required: true\n    // },\n    // title: {\n    //   type: String,\n    //   required: true\n    // },\n    // readyInMinutes: {\n    //   type: Number,\n    //   required: true\n    // },\n    // image: {\n    //   type: String,\n    //   required: true\n    // },\n    // aggregateLikes: {\n    //   type: Number,\n    //   required: false,\n    //   default() {\n    //     return undefined;\n    //   }\n    // }\n  },\n\n  computed: {\n    favoriteImage: function favoriteImage() {\n      return this.isFavorite ? require('@/assets/favorite-icon.png') : require('@/assets/not-favorite-icon.png');\n    }\n  },\n  methods: {\n    checkIfViewed: function checkIfViewed(recipeId) {\n      var viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\n      return viewedRecipes.includes(recipeId);\n    },\n    toggleFavorite: function toggleFavorite() {\n      this.isFavorite = !this.isFavorite;\n      if (this.isFavorite) {\n        this.addToFavorites();\n      } else {\n        this.removeFromFavorites();\n      }\n    },\n    addToFavorites: function addToFavorites() {\n      var _this = this;\n      var favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      if (!favorites.some(function (r) {\n        return r.id === _this.recipe.id;\n      })) {\n        favorites.push(this.recipe);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n    },\n    markAsViewed: function markAsViewed() {\n      var viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\n      if (!viewedRecipes.includes(this.recipe.id)) {\n        viewedRecipes.push(this.recipe.id);\n        localStorage.setItem('viewedRecipes', JSON.stringify(viewedRecipes));\n        this.isViewed = true;\n      }\n    },\n    removeFromFavorites: function removeFromFavorites() {\n      var _this2 = this;\n      var favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      var index = favorites.findIndex(function (r) {\n        return r.id === _this2.recipe.id;\n      });\n      if (index !== -1) {\n        favorites.splice(index, 1);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n    },\n    getFavoriteState: function getFavoriteState(recipe) {\n      var favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      return favorites.some(function (r) {\n        return r.id === recipe.id;\n      });\n    }\n  },\n  created: function created() {\n    this.isFavorite = this.getFavoriteState(this.recipe);\n    this.isViewed = this.checkIfViewed(this.recipe.id);\n  },\n  updated: function updated() {\n    this.isFavorite = this.getFavoriteState(this.recipe);\n    this.isViewed = this.checkIfViewed(this.recipe.id);\n  }\n};","map":{"version":3,"names":["data","image_load","isFavorite","getFavoriteState","recipe","isViewed","checkIfViewed","id","name","props","type","Object","required","computed","favoriteImage","require","methods","recipeId","viewedRecipes","JSON","parse","localStorage","getItem","includes","toggleFavorite","addToFavorites","removeFromFavorites","_this","favorites","some","r","push","setItem","stringify","markAsViewed","_this2","index","findIndex","splice","created","updated"],"sources":["src/components/RecipePreview.vue"],"sourcesContent":["<template>\r\n  <div class=\"card-container\" :to=\"{ name:'recipe', params: { recipeId: recipe.id } }\"> \r\n    <b-card\r\n      :to=\"{ name:'recipe', params: { recipeId: recipe.id } }\"\r\n      img-alt=\"Image\"\r\n      img-top\r\n      tag=\"article\"\r\n      style=\"max-width: 20rem;\"\r\n      class=\"mb-2\"\r\n    >\r\n    <template #header>\r\n        <b-link :to=\"{ name: 'recipe', params: { recipeId: recipe.id }}\" class=\"text-dark\"> {{ recipe.title }} </b-link>\r\n      </template>\r\n    <b-card-img :to=\"{ name: 'recipe', params: { recipeId: recipe.id }}\" :src=\"recipe.image\" alt=\"Image\" top></b-card-img>\r\n      <b-card-text>\r\n        Some quick example text to build on the card title and make up the bulk of the card's content.\r\n      </b-card-text>\r\n\r\n      <template #footer>\r\n        <b-icon v-if=\"isViewed\" icon=\"eye\" class=\"viewed-icon\"></b-icon>\r\n        <span :to=\"{ name: 'recipe', params: { recipeId: recipe.id } }\" v-if=\"recipe.vegetarian\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Vegetarian-mark.svg/1200px-Vegetarian-mark.svg.png\" class=\"vegi\" /></span>\r\n        <span v-if=\"recipe.vegan\"><img src=\"https://uxwing.com/wp-content/themes/uxwing/download/food-and-drinks/vegan-icon.png\" class=\"vegan\" /></span>\r\n        <span v-if=\"recipe.glutenFree\"><img src=\"https://cdn-icons-png.flaticon.com/512/4337/4337722.png\" class=\"glutenFree\" /></span>\r\n      </template>\r\n    </b-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  // mounted() {\r\n  //   this.axios.get(this.recipe.image).then((i) => {\r\n  //     this.image_load = true;\r\n  //   });\r\n  // },\r\n  data() {\r\n    return {\r\n      image_load: true,\r\n      isFavorite: this.getFavoriteState(this.recipe),\r\n      isViewed: this.checkIfViewed(this.recipe.id)\r\n    };\r\n  },\r\n\r\n  name: 'RecipePreviewCard',\r\n  props: {\r\n    recipe: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n\r\n    // id: {\r\n    //   type: Number,\r\n    //   required: true\r\n    // },\r\n    // title: {\r\n    //   type: String,\r\n    //   required: true\r\n    // },\r\n    // readyInMinutes: {\r\n    //   type: Number,\r\n    //   required: true\r\n    // },\r\n    // image: {\r\n    //   type: String,\r\n    //   required: true\r\n    // },\r\n    // aggregateLikes: {\r\n    //   type: Number,\r\n    //   required: false,\r\n    //   default() {\r\n    //     return undefined;\r\n    //   }\r\n    // }\r\n  },\r\n    computed: {\r\n    favoriteImage() {\r\n      return this.isFavorite ? require('@/assets/favorite-icon.png') : require('@/assets/not-favorite-icon.png');\r\n    }\r\n  },\r\n  methods: {\r\n    checkIfViewed(recipeId) {\r\n      let viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\r\n      return viewedRecipes.includes(recipeId);\r\n    },\r\n    toggleFavorite() {\r\n      this.isFavorite = !this.isFavorite;\r\n      if (this.isFavorite) {\r\n        this.addToFavorites();\r\n      } else {\r\n        this.removeFromFavorites();\r\n      }\r\n    },\r\n    addToFavorites() {\r\n      let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      if (!favorites.some(r => r.id === this.recipe.id)) {\r\n        favorites.push(this.recipe);\r\n        localStorage.setItem('favorites', JSON.stringify(favorites));\r\n      }\r\n    },\r\n    markAsViewed() {\r\n      let viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\r\n      if (!viewedRecipes.includes(this.recipe.id)) {\r\n        viewedRecipes.push(this.recipe.id);\r\n        localStorage.setItem('viewedRecipes', JSON.stringify(viewedRecipes));\r\n        this.isViewed = true; \r\n      }\r\n    },\r\n    removeFromFavorites() {\r\n      let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      let index = favorites.findIndex(r => r.id === this.recipe.id);\r\n      if (index !== -1) {\r\n        favorites.splice(index, 1);\r\n        localStorage.setItem('favorites', JSON.stringify(favorites));\r\n      }\r\n    },\r\n        getFavoriteState(recipe) {\r\n      let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      return favorites.some(r => r.id === recipe.id);\r\n    }\r\n  },\r\n    created() {\r\n    this.isFavorite = this.getFavoriteState(this.recipe);\r\n    this.isViewed = this.checkIfViewed(this.recipe.id);\r\n  },\r\n  updated() {\r\n    this.isFavorite = this.getFavoriteState(this.recipe);\r\n    this.isViewed = this.checkIfViewed(this.recipe.id);\r\n  }\r\n  \r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.card-container {\r\n  border-left: 0cap;\r\n}\r\n.vegan,\r\n.glutenFree,\r\n.vegi {\r\n  width: 30px;\r\n  height: auto;\r\n  margin-right: 5px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}