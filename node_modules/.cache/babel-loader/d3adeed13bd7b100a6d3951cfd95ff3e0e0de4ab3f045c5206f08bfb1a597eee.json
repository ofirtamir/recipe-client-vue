{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/Documents/GitHub/assignment2-1-208897991_208009845/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/User/Documents/GitHub/assignment2-1-208897991_208009845/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/User/Documents/GitHub/assignment2-1-208897991_208009845/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport countries from \"../assets/countries\";\nimport { required, minLength, maxLength, alpha, sameAs, email as emailValidator } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"Register\",\n  data: function data() {\n    return {\n      form: {\n        username: \"\",\n        firstname: \"\",\n        lastname: \"\",\n        country: null,\n        password: \"\",\n        confirmedPassword: \"\",\n        email: \"\",\n        submitError: undefined\n      },\n      countries: [{\n        value: null,\n        text: \"\",\n        disabled: true\n      }],\n      errors: [],\n      validated: false\n    };\n  },\n  validations: {\n    form: {\n      username: {\n        required: required,\n        length: function length(u) {\n          return minLength(3)(u) && maxLength(8)(u);\n        },\n        alpha: alpha\n      },\n      firstname: {\n        required: required,\n        alpha: alpha\n      },\n      lastname: {\n        required: required,\n        alpha: alpha\n      },\n      email: {\n        required: required,\n        email: emailValidator\n      },\n      country: {\n        required: required\n      },\n      password: {\n        required: required,\n        length: function length(p) {\n          var isValidLength = minLength(5)(p) && maxLength(10)(p);\n          var hasNumber = /[0-9]/.test(p);\n          var hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(p);\n          return isValidLength && hasNumber && hasSpecialChar;\n        }\n      },\n      confirmedPassword: {\n        required: required,\n        sameAsPassword: sameAs(\"password\")\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this$countries;\n    (_this$countries = this.countries).push.apply(_this$countries, _toConsumableArray(countries));\n  },\n  methods: {\n    validateState: function validateState(param) {\n      var _this$$v$form$param = this.$v.form[param],\n        $dirty = _this$$v$form$param.$dirty,\n        $error = _this$$v$form$param.$error;\n      return $dirty ? !$error : null;\n    },\n    Register: function Register() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, _err$response, _err$response$data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.post(_this.$root.store.server_domain + \"/register\", {\n                username: _this.form.username,\n                firstname: _this.form.firstname,\n                lastname: _this.form.lastname,\n                password: _this.form.password,\n                country: _this.form.country,\n                email: _this.form.email\n              });\n            case 3:\n              response = _context.sent;\n              _this.$router.push(\"/loginpage\");\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              _this.form.submitError = ((_err$response = _context.t0.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Register failed\";\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    onRegister: function onRegister() {\n      this.$v.form.$touch();\n      if (this.$v.form.$anyError) {\n        return;\n      }\n      this.Register();\n    },\n    onReset: function onReset() {\n      var _this2 = this;\n      this.form = {\n        username: \"\",\n        firstname: \"\",\n        lastname: \"\",\n        country: null,\n        password: \"\",\n        confirmedPassword: \"\",\n        email: \"\"\n      };\n      this.$nextTick(function () {\n        _this2.$v.$reset();\n      });\n    }\n  }\n};","map":{"version":3,"names":["countries","required","minLength","maxLength","alpha","sameAs","email","emailValidator","axios","name","data","form","username","firstname","lastname","country","password","confirmedPassword","submitError","undefined","value","text","disabled","errors","validated","validations","length","u","p","isValidLength","hasNumber","test","hasSpecialChar","sameAsPassword","mounted","_this$countries","push","apply","_toConsumableArray","methods","validateState","param","_this$$v$form$param","$v","$dirty","$error","Register","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","_err$response","_err$response$data","wrap","_callee$","_context","prev","next","post","$root","store","server_domain","sent","$router","t0","message","stop","onRegister","$touch","$anyError","onReset","_this2","$nextTick","$reset"],"sources":["src/components/Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1 class=\"title\">Register</h1>\r\n    <b-form @submit.prevent=\"onRegister\" @reset.prevent=\"onReset\">\r\n\r\n      <!--  Username -->\r\n      <b-form-group\r\n        id=\"input-group-username\"\r\n        label-cols-sm=\"3\"\r\n        label=\"Username:\"\r\n        label-for=\"username\"\r\n      >\r\n        <b-form-input\r\n          id=\"username\"\r\n          v-model=\"$v.form.username.$model\"\r\n          type=\"text\"\r\n          :state=\"validateState('username')\"\r\n        ></b-form-input>\r\n        <b-form-invalid-feedback v-if=\"!$v.form.username.required\">\r\n          Username is required\r\n        </b-form-invalid-feedback>\r\n        <b-form-invalid-feedback v-else-if=\"!$v.form.username.length\">\r\n          Username length should be between 3-8 characters long\r\n        </b-form-invalid-feedback>\r\n        <b-form-invalid-feedback v-if=\"!$v.form.username.alpha\">\r\n          Username must contain only alphabetic characters\r\n        </b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <!-- First Name -->\r\n<b-form-group\r\n  id=\"input-group-firstname\"\r\n  label-cols-sm=\"3\"\r\n  label=\"First Name:\"\r\n  label-for=\"firstname\"\r\n>\r\n  <b-form-input\r\n    id=\"firstname\"\r\n    v-model=\"$v.form.firstname.$model\"\r\n    type=\"text\"\r\n    :state=\"validateState('firstname')\"\r\n  ></b-form-input>\r\n  <b-form-invalid-feedback v-if=\"!$v.form.firstname.required\">\r\n    First Name is required\r\n  </b-form-invalid-feedback>\r\n  <b-form-invalid-feedback v-if=\"!$v.form.firstname.alpha\">\r\n    First Name must contain only alphabetic characters\r\n  </b-form-invalid-feedback>\r\n</b-form-group>\r\n\r\n<!-- Last Name -->\r\n<b-form-group\r\n  id=\"input-group-lastname\"\r\n  label-cols-sm=\"3\"\r\n  label=\"Last Name:\"\r\n  label-for=\"lastname\"\r\n>\r\n  <b-form-input\r\n    id=\"lastname\"\r\n    v-model=\"$v.form.lastname.$model\"\r\n    type=\"text\"\r\n    :state=\"validateState('lastname')\"\r\n  ></b-form-input>\r\n  <b-form-invalid-feedback v-if=\"!$v.form.lastname.required\">\r\n    Last Name is required\r\n  </b-form-invalid-feedback>\r\n  <b-form-invalid-feedback v-if=\"!$v.form.lastname.alpha\">\r\n    Last Name must contain only alphabetic characters\r\n  </b-form-invalid-feedback>\r\n</b-form-group>\r\n\r\n      <!--  Email -->\r\n      <b-form-group\r\n        id=\"input-group-email\"\r\n        label-cols-sm=\"3\"\r\n        label=\"Email:\"\r\n        label-for=\"email\"\r\n      >\r\n        <b-form-input\r\n          id=\"email\"\r\n          v-model=\"$v.form.email.$model\"\r\n          type=\"email\"\r\n          :state=\"validateState('email')\"\r\n        ></b-form-input>\r\n        <b-form-invalid-feedback v-if=\"!$v.form.email.required\">\r\n          Email is required\r\n        </b-form-invalid-feedback>\r\n        <b-form-invalid-feedback v-if=\"!$v.form.email.email\">\r\n          Email must be valid\r\n        </b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <!--  Country -->\r\n      <b-form-group\r\n        id=\"input-group-country\"\r\n        label-cols-sm=\"3\"\r\n        label=\"Country:\"\r\n        label-for=\"country\"\r\n      >\r\n        <b-form-select\r\n          id=\"country\"\r\n          v-model=\"$v.form.country.$model\"\r\n          :options=\"countries\"\r\n          :state=\"validateState('country')\"\r\n        ></b-form-select>\r\n        <b-form-invalid-feedback>\r\n          Country is required\r\n        </b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <!--  Password -->\r\n      <b-form-group\r\n        id=\"input-group-password\"\r\n        label-cols-sm=\"3\"\r\n        label=\"Password:\"\r\n        label-for=\"password\"\r\n      >\r\n        <b-form-input\r\n          id=\"password\"\r\n          type=\"password\"\r\n          v-model=\"$v.form.password.$model\"\r\n          :state=\"validateState('password')\"\r\n        ></b-form-input>\r\n        <b-form-invalid-feedback v-if=\"!$v.form.password.required\">\r\n          Password is required\r\n        </b-form-invalid-feedback>\r\n        <b-form-invalid-feedback v-if=\"$v.form.password.$error\">\r\n          Password should be 5-10 characters long\r\n        </b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <!--  Confirm Password -->\r\n      <b-form-group\r\n        id=\"input-group-confirmedPassword\"\r\n        label-cols-sm=\"3\"\r\n        label=\"Confirm Password:\"\r\n        label-for=\"confirmedPassword\"\r\n      >\r\n        <b-form-input\r\n          id=\"confirmedPassword\"\r\n          type=\"password\"\r\n          v-model=\"$v.form.confirmedPassword.$model\"\r\n          :state=\"validateState('confirmedPassword')\"\r\n        ></b-form-input>\r\n        <b-form-invalid-feedback v-if=\"!$v.form.confirmedPassword.required\">\r\n          Password confirmation is required\r\n        </b-form-invalid-feedback>\r\n        <b-form-invalid-feedback v-else-if=\"!$v.form.confirmedPassword.sameAsPassword\">\r\n          The confirmed password is not equal to the original password\r\n        </b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <!-- button -->\r\n      <b-button type=\"reset\" variant=\"danger\">Reset</b-button>\r\n      <b-button\r\n        type=\"submit\"\r\n        variant=\"primary\"\r\n        style=\"width:250px;\"\r\n        class=\"ml-5 w-75\"\r\n        >Register</b-button\r\n      >\r\n      <div class=\"mt-2\">\r\n        You have an account already?\r\n        <router-link to=\"loginpage\"> Log in here</router-link>\r\n      </div>\r\n    </b-form>\r\n    <b-alert\r\n      class=\"mt-2\"\r\n      v-if=\"form.submitError\"\r\n      variant=\"warning\"\r\n      dismissible\r\n      show\r\n    >\r\n      Register failed: {{ form.submitError }}\r\n    </b-alert>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport countries from \"../assets/countries\";\r\nimport {\r\n  required,\r\n  minLength,\r\n  maxLength,\r\n  alpha,\r\n  sameAs,\r\n  email as emailValidator\r\n} from \"vuelidate/lib/validators\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"Register\",\r\n  data() {\r\n    return {\r\n      form: {\r\n        username: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        country: null,\r\n        password: \"\",\r\n        confirmedPassword: \"\",\r\n        email: \"\",\r\n        submitError: undefined\r\n      },\r\n      countries: [{ value: null, text: \"\", disabled: true }],\r\n      errors: [],\r\n      validated: false\r\n    };\r\n  },\r\n  validations: {\r\n    form: {\r\n      username: {\r\n        required,\r\n        length: (u) => minLength(3)(u) && maxLength(8)(u),\r\n        alpha\r\n      },\r\n      firstname: {\r\n        required,\r\n        alpha\r\n      },\r\n      lastname: {\r\n        required,\r\n        alpha\r\n      },\r\n      email: {\r\n        required,\r\n        email: emailValidator\r\n      },\r\n      country: {\r\n        required\r\n      },\r\n      password: {\r\n      required,\r\n      length: (p) => {\r\n        const isValidLength = minLength(5)(p) && maxLength(10)(p);\r\n        const hasNumber = /[0-9]/.test(p);\r\n        const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(p);\r\n        return isValidLength && hasNumber && hasSpecialChar;\r\n      }\r\n    },\r\n      confirmedPassword: {\r\n        required,\r\n        sameAsPassword: sameAs(\"password\")\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.countries.push(...countries);\r\n  },\r\n  methods: {\r\n    validateState(param) {\r\n      const { $dirty, $error } = this.$v.form[param];\r\n      return $dirty ? !$error : null;\r\n    },\r\n    async Register() {\r\n      // console.log(\"First Name:\", this.form.firstname);\r\n      // console.log(\"Last Name:\", this.form.lastname);\r\n  \r\n  try {\r\n    const response = await axios.post(\r\n      this.$root.store.server_domain + \"/register\",\r\n      {\r\n        username: this.form.username,\r\n        firstname: this.form.firstname, \r\n        lastname: this.form.lastname,  \r\n        password: this.form.password,\r\n        country: this.form.country,\r\n        email: this.form.email\r\n      }\r\n    );\r\n    this.$router.push(\"/loginpage\");\r\n  } catch (err) {\r\n    this.form.submitError = err.response?.data?.message || \"Register failed\";\r\n  }\r\n},\r\n    onRegister() {\r\n      this.$v.form.$touch();\r\n      if (this.$v.form.$anyError) {\r\n        return;\r\n      }\r\n      this.Register();\r\n    },\r\n    onReset() {\r\n      this.form = {\r\n        username: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        country: null,\r\n        password: \"\",\r\n        confirmedPassword: \"\",\r\n        email: \"\"\r\n      };\r\n      this.$nextTick(() => {\r\n        this.$v.$reset();\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.container {\r\n  max-width: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.title {\r\n  margin-bottom: 1rem;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}