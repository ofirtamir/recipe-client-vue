{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { mockAddFavorite, mockDeleteFavorite } from \"../services/user.js\";\nexport default {\n  name: 'icons',\n  data: function data() {\n    return {\n      image_load: true,\n      isFavorite: false,\n      isViewed: false\n    };\n  },\n  props: {\n    recipe: {\n      required: true\n    }\n  },\n  computed: {\n    favoriteImage: function favoriteImage() {\n      return this.isFavorite ? require('@/assets/favorite-icon.png') : require('@/assets/not-favorite-icon.png');\n    }\n  },\n  methods: {\n    checkIfViewed: function checkIfViewed() {\n      var viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\n      return viewedRecipes.includes(this.recipe.id);\n    },\n    toggleFavorite: function toggleFavorite() {\n      this.isFavorite = !this.isFavorite;\n      var action = this.isFavorite ? mockAddFavorite : mockDeleteFavorite;\n      try {\n        var serverResponse = action(this.recipeId);\n        var status = serverResponse.status,\n          data = serverResponse.response.data;\n        if (status === 200 && data.success) {\n          console.log(data.message);\n          this.showToast(data.message, 'Success', 'success');\n        } else {\n          this.handleError(serverResponse);\n        }\n      } catch (error) {\n        this.handleError(error);\n      }\n    },\n    showToast: function showToast(message, title, variant) {\n      this.$bvToast.toast(message, {\n        title: title,\n        variant: variant,\n        solid: true\n      });\n    },\n    handleError: function handleError(error) {\n      console.error('Error updating favorite status:', error);\n      this.showToast('Error updating favorite status', 'Error', 'danger');\n    },\n    created: function created() {\n      this.isViewed = this.checkIfViewed(this.recipe.id);\n    },\n    updated: function updated() {\n      this.isViewed = this.checkIfViewed(this.recipe.id);\n    }\n  }\n};","map":{"version":3,"names":["mockAddFavorite","mockDeleteFavorite","name","data","image_load","isFavorite","isViewed","props","recipe","required","computed","favoriteImage","require","methods","checkIfViewed","viewedRecipes","JSON","parse","localStorage","getItem","includes","id","toggleFavorite","action","serverResponse","recipeId","status","response","success","console","log","message","showToast","handleError","error","title","variant","$bvToast","toast","solid","created","updated"],"sources":["src/components/Icons.vue"],"sourcesContent":["<template>\r\n    \r\n    <div class=\"footer-icons\">\r\n        <b-icon v-if=\"checkIfViewed()\" icon=\"eye\" class=\"viewed-icon\"></b-icon>\r\n        <span :to=\"{ name: 'recipe', params: { recipeId: recipe.id } }\" v-if=\"recipe.vegetarian\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Vegetarian-mark.svg/1200px-Vegetarian-mark.svg.png\" class=\"vegi\" /></span>\r\n        <span v-if=\"recipe.vegan\"><img src=\"https://uxwing.com/wp-content/themes/uxwing/download/food-and-drinks/vegan-icon.png\" class=\"vegan\" /></span>\r\n        <span v-if=\"recipe.glutenFree\"><img src=\"https://cdn-icons-png.flaticon.com/512/4337/4337722.png\" class=\"glutenFree\" /></span>\r\n        \r\n\r\n        <label style=\"background-color: transparent;\">\r\n        <input type=\"checkbox\" @change=\"toggleFavorite\" class=\"custom-checkbox\"> \r\n        <img :src=\"favoriteImage\" alt=\"Favorite\" class=\"favorite-icon\">\r\n        </label>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mockAddFavorite, mockDeleteFavorite } from \"../services/user.js\";\r\nexport default {\r\n    name: 'icons',\r\n    data() {\r\n        return {\r\n            image_load: true,\r\n            isFavorite: false,\r\n            isViewed: false\r\n        };\r\n    },\r\n    props: {\r\n        recipe: {\r\n            required: true\r\n        }\r\n    },\r\n    computed: {\r\n        favoriteImage() {\r\n            return this.isFavorite ? require('@/assets/favorite-icon.png') : require('@/assets/not-favorite-icon.png');\r\n        }\r\n    },\r\n    methods: {\r\n        checkIfViewed() {\r\n            let viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\r\n            return viewedRecipes.includes(this.recipe.id);\r\n        },\r\n        \r\n        toggleFavorite() {\r\n            this.isFavorite = !this.isFavorite;\r\n            const action = this.isFavorite ? mockAddFavorite : mockDeleteFavorite;\r\n\r\n            try {\r\n                const serverResponse = action(this.recipeId);\r\n\r\n                const { status, response: { data } } = serverResponse;\r\n\r\n                if (status === 200 && data.success) {\r\n                console.log(data.message);\r\n                this.showToast(data.message, 'Success', 'success');\r\n                } else {\r\n                this.handleError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                this.handleError(error);\r\n            }\r\n        },\r\n\r\n        showToast(message, title, variant) {\r\n            this.$bvToast.toast(message, {\r\n                title,\r\n                variant,\r\n                solid: true\r\n            });\r\n        },\r\n\r\n        handleError(error) {\r\n            console.error('Error updating favorite status:', error);\r\n            this.showToast('Error updating favorite status', 'Error', 'danger');\r\n        },\r\n        created() {\r\n            this.isViewed = this.checkIfViewed(this.recipe.id);\r\n        },\r\n        updated() {\r\n            this.isViewed = this.checkIfViewed(this.recipe.id);\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.vegan,\r\n.glutenFree,\r\n.vegi {\r\n  width: 30px;\r\n  height: auto;\r\n}\r\n.favorite-icon\r\n{\r\n  width: 30px;\r\n  height: auto;\r\n  margin-top: 5px;\r\n}\r\n\r\n.custom-checkbox {\r\n  opacity: 0; /* Make it invisible */\r\n  width: 0;\r\n  height: 0;\r\n}\r\n</style>"],"mappings":";;AAiBA,SAAAA,eAAA,EAAAC,kBAAA;AACA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,UAAA;MACAC,UAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,aAAA,WAAAA,cAAA;MACA,YAAAN,UAAA,GAAAO,OAAA,iCAAAA,OAAA;IACA;EACA;EACAC,OAAA;IACAC,aAAA,WAAAA,cAAA;MACA,IAAAC,aAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,OAAAJ,aAAA,CAAAK,QAAA,MAAAZ,MAAA,CAAAa,EAAA;IACA;IAEAC,cAAA,WAAAA,eAAA;MACA,KAAAjB,UAAA,SAAAA,UAAA;MACA,IAAAkB,MAAA,QAAAlB,UAAA,GAAAL,eAAA,GAAAC,kBAAA;MAEA;QACA,IAAAuB,cAAA,GAAAD,MAAA,MAAAE,QAAA;QAEA,IAAAC,MAAA,GAAAF,cAAA,CAAAE,MAAA;UAAAvB,IAAA,GAAAqB,cAAA,CAAAG,QAAA,CAAAxB,IAAA;QAEA,IAAAuB,MAAA,YAAAvB,IAAA,CAAAyB,OAAA;UACAC,OAAA,CAAAC,GAAA,CAAA3B,IAAA,CAAA4B,OAAA;UACA,KAAAC,SAAA,CAAA7B,IAAA,CAAA4B,OAAA;QACA;UACA,KAAAE,WAAA,CAAAT,cAAA;QACA;MACA,SAAAU,KAAA;QACA,KAAAD,WAAA,CAAAC,KAAA;MACA;IACA;IAEAF,SAAA,WAAAA,UAAAD,OAAA,EAAAI,KAAA,EAAAC,OAAA;MACA,KAAAC,QAAA,CAAAC,KAAA,CAAAP,OAAA;QACAI,KAAA,EAAAA,KAAA;QACAC,OAAA,EAAAA,OAAA;QACAG,KAAA;MACA;IACA;IAEAN,WAAA,WAAAA,YAAAC,KAAA;MACAL,OAAA,CAAAK,KAAA,oCAAAA,KAAA;MACA,KAAAF,SAAA;IACA;IACAQ,OAAA,WAAAA,QAAA;MACA,KAAAlC,QAAA,QAAAQ,aAAA,MAAAN,MAAA,CAAAa,EAAA;IACA;IACAoB,OAAA,WAAAA,QAAA;MACA,KAAAnC,QAAA,QAAAQ,aAAA,MAAAN,MAAA,CAAAa,EAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}