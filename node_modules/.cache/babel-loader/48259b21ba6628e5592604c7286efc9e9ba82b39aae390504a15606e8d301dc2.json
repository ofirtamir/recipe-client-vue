{"ast":null,"code":"import \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nexport default {\n  name: 'RecipePreviewCard',\n  props: {\n    recipe: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      image_load: true,\n      isFavorite: this.getFavoriteState(this.recipe),\n      isViewed: this.checkIfViewed(this.recipe.id)\n    };\n  },\n  computed: {\n    favoriteImage: function favoriteImage() {\n      return this.isFavorite ? require('@/assets/favorite.png') : require('@/assets/notfavorite.png');\n    }\n  },\n  methods: {\n    toggleFavorite: function toggleFavorite() {\n      this.isFavorite = !this.isFavorite;\n      if (this.isFavorite) {\n        this.addToFavorites();\n      } else {\n        this.removeFromFavorites();\n      }\n    },\n    addToFavorites: function addToFavorites() {\n      var _this = this;\n      var favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      if (!favorites.some(function (r) {\n        return r.id === _this.recipe.id;\n      })) {\n        favorites.push(this.recipe);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n    },\n    removeFromFavorites: function removeFromFavorites() {\n      var _this2 = this;\n      var favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      var index = favorites.findIndex(function (r) {\n        return r.id === _this2.recipe.id;\n      });\n      if (index !== -1) {\n        favorites.splice(index, 1);\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n      }\n    },\n    markAsViewed: function markAsViewed() {\n      var viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\n      if (!viewedRecipes.includes(this.recipe.id)) {\n        viewedRecipes.push(this.recipe.id);\n        localStorage.setItem('viewedRecipes', JSON.stringify(viewedRecipes));\n        this.isViewed = true; // Update the state to show the viewed icon\n      }\n    },\n    checkIfViewed: function checkIfViewed(recipeId) {\n      var viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\n      return viewedRecipes.includes(recipeId);\n    },\n    getFavoriteState: function getFavoriteState(recipe) {\n      var favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      return favorites.some(function (r) {\n        return r.id === recipe.id;\n      });\n    }\n  },\n  created: function created() {\n    this.isFavorite = this.getFavoriteState(this.recipe);\n    this.isViewed = this.checkIfViewed(this.recipe.id);\n  },\n  updated: function updated() {\n    this.isFavorite = this.getFavoriteState(this.recipe);\n    this.isViewed = this.checkIfViewed(this.recipe.id);\n  }\n};","map":{"version":3,"names":["name","props","recipe","type","Object","required","data","image_load","isFavorite","getFavoriteState","isViewed","checkIfViewed","id","computed","favoriteImage","require","methods","toggleFavorite","addToFavorites","removeFromFavorites","_this","favorites","JSON","parse","localStorage","getItem","some","r","push","setItem","stringify","_this2","index","findIndex","splice","markAsViewed","viewedRecipes","includes","recipeId","created","updated"],"sources":["src/components/RecipePreview.vue"],"sourcesContent":["<template>\r\n  <div class=\"card recipe-card\" style=\"width: 18rem;\">\r\n    <router-link\r\n      :to=\"{ name: 'recipe', params: { recipeId: recipe.id } }\"\r\n      class=\"card-img-link\"\r\n    >\r\n      <img v-if=\"image_load\" :src=\"recipe.image\" class=\"card-img-top recipe-image\" @click=\"markAsViewed()\" />\r\n    </router-link>\r\n    <div class=\"card-body\">\r\n      <h5 class=\"card-title\" :title=\"recipe.title\">{{ recipe.title }}</h5>\r\n      <ul class=\"card-text recipe-overview\">\r\n        <li>{{ recipe.readyInMinutes }} minutes</li>\r\n        <li>{{ recipe.aggregateLikes }} likes</li>\r\n      </ul>\r\n      <div class=\"card-icons\">\r\n        <b-icon v-if=\"isViewed\" icon=\"eye\" class=\"viewed-icon\"></b-icon>\r\n        <span v-if=\"recipe.vegetarian\"><img src=\"\" class=\"vegi\" /></span>\r\n        <span v-if=\"recipe.vegan\"><img src=\"\" class=\"vegan\" /></span>\r\n        <span v-if=\"recipe.glutenFree\"><img src=\"\" class=\"glutenfree\" /></span>\r\n        <div class=\"btn-group-toggle\">\r\n          <label class=\"btn btn-secondary active\" style=\"background-color: white;\">\r\n            <input\r\n              type=\"checkbox\"\r\n              v-model=\"isFavorite\"\r\n              @change=\"toggleFavorite\"\r\n            >\r\n            <img\r\n              :src=\"favoriteImage\"\r\n              alt=\"Favorite\"\r\n              class=\"favorite-icon\"\r\n            >\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'RecipePreviewCard',\r\n  props: {\r\n    recipe: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      image_load: true,\r\n      isFavorite: this.getFavoriteState(this.recipe),\r\n      isViewed: this.checkIfViewed(this.recipe.id)\r\n    };\r\n  },\r\n  computed: {\r\n    favoriteImage() {\r\n      return this.isFavorite ? require('@/assets/favorite.png') : require('@/assets/notfavorite.png');\r\n    }\r\n  },\r\n  methods: {\r\n    toggleFavorite() {\r\n      this.isFavorite = !this.isFavorite;\r\n      if (this.isFavorite) {\r\n        this.addToFavorites();\r\n      } else {\r\n        this.removeFromFavorites();\r\n      }\r\n    },\r\n    addToFavorites() {\r\n      let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      if (!favorites.some(r => r.id === this.recipe.id)) {\r\n        favorites.push(this.recipe);\r\n        localStorage.setItem('favorites', JSON.stringify(favorites));\r\n      }\r\n    },\r\n    removeFromFavorites() {\r\n      let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      let index = favorites.findIndex(r => r.id === this.recipe.id);\r\n      if (index !== -1) {\r\n        favorites.splice(index, 1);\r\n        localStorage.setItem('favorites', JSON.stringify(favorites));\r\n      }\r\n    },\r\n    markAsViewed() {\r\n      let viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\r\n      if (!viewedRecipes.includes(this.recipe.id)) {\r\n        viewedRecipes.push(this.recipe.id);\r\n        localStorage.setItem('viewedRecipes', JSON.stringify(viewedRecipes));\r\n        this.isViewed = true; // Update the state to show the viewed icon\r\n      }\r\n    },\r\n    checkIfViewed(recipeId) {\r\n      let viewedRecipes = JSON.parse(localStorage.getItem('viewedRecipes')) || [];\r\n      return viewedRecipes.includes(recipeId);\r\n    },\r\n    getFavoriteState(recipe) {\r\n      let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      return favorites.some(r => r.id === recipe.id);\r\n    }\r\n  },\r\n  created() {\r\n    this.isFavorite = this.getFavoriteState(this.recipe);\r\n    this.isViewed = this.checkIfViewed(this.recipe.id);\r\n  },\r\n  updated() {\r\n    this.isFavorite = this.getFavoriteState(this.recipe);\r\n    this.isViewed = this.checkIfViewed(this.recipe.id);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.recipe-card {\r\n  margin-bottom: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  margin-left: 120px;\r\n}\r\n\r\n.card-img-link {\r\n  display: block;\r\n  overflow: hidden;\r\n  border-top-left-radius: 8px;\r\n  border-top-right-radius: 8px;\r\n  position: relative;\r\n}\r\n\r\n.recipe-image {\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n}\r\n\r\n.card-body {\r\n  padding: 10px;\r\n}\r\n\r\n.card-title {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.recipe-overview {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.card-icons {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.favorite-icon {\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n\r\n.vegi {\r\n  width: 20px;\r\n  height: auto;\r\n  margin-right: 5px;\r\n}\r\n\r\n.vegan,\r\n.glutenfree {\r\n  width: 25px;\r\n  height: auto;\r\n  margin-right: 5px;\r\n}\r\n\r\n.btn-group-toggle {\r\n  margin-left: auto;\r\n}\r\n\r\n.viewed-icon{\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-right: 5px;\r\n}\r\n\r\n</style>"],"mappings":";;;;;;;;AAuCA;EACAA,IAAA;EACAC,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,UAAA;MACAC,UAAA,OAAAC,gBAAA,MAAAP,MAAA;MACAQ,QAAA,OAAAC,aAAA,MAAAT,MAAA,CAAAU,EAAA;IACA;EACA;EACAC,QAAA;IACAC,aAAA,WAAAA,cAAA;MACA,YAAAN,UAAA,GAAAO,OAAA,4BAAAA,OAAA;IACA;EACA;EACAC,OAAA;IACAC,cAAA,WAAAA,eAAA;MACA,KAAAT,UAAA,SAAAA,UAAA;MACA,SAAAA,UAAA;QACA,KAAAU,cAAA;MACA;QACA,KAAAC,mBAAA;MACA;IACA;IACAD,cAAA,WAAAA,eAAA;MAAA,IAAAE,KAAA;MACA,IAAAC,SAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,KAAAJ,SAAA,CAAAK,IAAA,WAAAC,CAAA;QAAA,OAAAA,CAAA,CAAAf,EAAA,KAAAQ,KAAA,CAAAlB,MAAA,CAAAU,EAAA;MAAA;QACAS,SAAA,CAAAO,IAAA,MAAA1B,MAAA;QACAsB,YAAA,CAAAK,OAAA,cAAAP,IAAA,CAAAQ,SAAA,CAAAT,SAAA;MACA;IACA;IACAF,mBAAA,WAAAA,oBAAA;MAAA,IAAAY,MAAA;MACA,IAAAV,SAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,IAAAO,KAAA,GAAAX,SAAA,CAAAY,SAAA,WAAAN,CAAA;QAAA,OAAAA,CAAA,CAAAf,EAAA,KAAAmB,MAAA,CAAA7B,MAAA,CAAAU,EAAA;MAAA;MACA,IAAAoB,KAAA;QACAX,SAAA,CAAAa,MAAA,CAAAF,KAAA;QACAR,YAAA,CAAAK,OAAA,cAAAP,IAAA,CAAAQ,SAAA,CAAAT,SAAA;MACA;IACA;IACAc,YAAA,WAAAA,aAAA;MACA,IAAAC,aAAA,GAAAd,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,KAAAW,aAAA,CAAAC,QAAA,MAAAnC,MAAA,CAAAU,EAAA;QACAwB,aAAA,CAAAR,IAAA,MAAA1B,MAAA,CAAAU,EAAA;QACAY,YAAA,CAAAK,OAAA,kBAAAP,IAAA,CAAAQ,SAAA,CAAAM,aAAA;QACA,KAAA1B,QAAA;MACA;IACA;IACAC,aAAA,WAAAA,cAAA2B,QAAA;MACA,IAAAF,aAAA,GAAAd,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,OAAAW,aAAA,CAAAC,QAAA,CAAAC,QAAA;IACA;IACA7B,gBAAA,WAAAA,iBAAAP,MAAA;MACA,IAAAmB,SAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,OAAAJ,SAAA,CAAAK,IAAA,WAAAC,CAAA;QAAA,OAAAA,CAAA,CAAAf,EAAA,KAAAV,MAAA,CAAAU,EAAA;MAAA;IACA;EACA;EACA2B,OAAA,WAAAA,QAAA;IACA,KAAA/B,UAAA,QAAAC,gBAAA,MAAAP,MAAA;IACA,KAAAQ,QAAA,QAAAC,aAAA,MAAAT,MAAA,CAAAU,EAAA;EACA;EACA4B,OAAA,WAAAA,QAAA;IACA,KAAAhC,UAAA,QAAAC,gBAAA,MAAAP,MAAA;IACA,KAAAQ,QAAA,QAAAC,aAAA,MAAAT,MAAA,CAAAU,EAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}