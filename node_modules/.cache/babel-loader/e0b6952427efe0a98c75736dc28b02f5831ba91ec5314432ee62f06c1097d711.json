{"ast":null,"code":"\n// import RecipePreview from \"../components/RecipePreview.vue\";\n// import { mockGetRecipesPreview } from \"../services/recipes.js\";\n// export default {\n//   name: \"RecipePreviewList\",\n//   components: {\n//     RecipePreview\n//   },\n//   props: {\n//     title: {\n//       type: String,\n//       required: true\n//     }\n//   },\n//   data() {\n//     return {\n//       recipes: []\n//     };\n//   },\n//   mounted() {\n//     this.updateRecipes();\n//   },\n//   methods: {\n//     async updateRecipes() {\n//       try {\n//         // const response = await this.axios.get(\n//         //   this.$root.store.server_domain + \"/recipes/random\",\n//         // );\n\n//         const amountToFetch = 3; // Set this to how many recipes you want to fetch\n//         const response = mockGetRecipesPreview(amountToFetch);\n\n//         console.log(response);\n//         const recipes = response.data.recipes;\n//         console.log(recipes);\n//         this.recipes = [];\n//         this.recipes.push(...recipes);\n//       } catch (error) {\n//         console.log(error);\n//       }\n//     }\n//   }\n// };\n//","map":{"version":3,"names":[],"sources":["src/pages/SearchPage.vue"],"sourcesContent":["\r\n<template>\r\n<div  class=\"container\">\r\n\r\n  <div>\r\n  <b-jumbotron>\r\n    <template #header>Search</template>\r\n\r\n    <template #lead>\r\n      Here you will find the recipes \r\n    </template>\r\n\r\n    <hr class=\"my-4\">\r\n  <!-- search components -->\r\n  <b-input-group prepend=\"Search\" class=\"mt-3\">\r\n    <b-form-input v-model=\"searchMessage\"></b-form-input>\r\n    <b-input-group-append>\r\n      <b-button variant=\"info\">Button</b-button>\r\n    </b-input-group-append>\r\n  </b-input-group>\r\n  <b-container>\r\n    <h3>\r\n      <slot></slot>\r\n    </h3>\r\n    <b-row>\r\n      <b-col v-for=\"r in recipes\" :key=\"r.id\">\r\n        <RecipePreview class=\"recipePreview\" :recipe=\"r\" />\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n    <!-- <p>\r\n      It uses utility classes for typography and spacing to space content out within the larger\r\n      container.\r\n    </p> -->\r\n  </b-jumbotron>\r\n\r\n   <div>\r\n    <b-form @submit.prevent=\"searchRecipes\">\r\n      <b-form-input v-model=\"query\" placeholder=\"Search for recipes\"></b-form-input>\r\n      <b-button type=\"submit\" variant=\"primary\">Search</b-button>\r\n    </b-form>\r\n\r\n    <div v-if=\"recipes.length\">\r\n      <h3>Search Results:</h3>\r\n      <b-row>\r\n        <b-col v-for=\"recipe in recipes\" :key=\"recipe.id\" cols=\"12\" md=\"4\">\r\n          <b-card :title=\"recipe.title\" :img-src=\"recipe.image\" img-alt=\"Recipe Image\" img-top>\r\n            <b-card-text>\r\n              Ready in {{ recipe.readyInMinutes }} minutes\r\n            </b-card-text>\r\n            <b-button @click=\"viewRecipe(recipe.id)\" variant=\"info\">View Recipe</b-button>\r\n          </b-card>\r\n        </b-col>\r\n      </b-row>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n</div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      query: '',\r\n      recipes: []\r\n    };\r\n  },\r\n  methods: {\r\n    async searchRecipes() {\r\n      const apiKey = 'YOUR_SPOONACULAR_API_KEY';  // Replace with your Spoonacular API key\r\n      const url = `https://api.spoonacular.com/recipes/complexSearch?query=${this.query}&apiKey=${apiKey}&number=10`;\r\n\r\n      try {\r\n        const response = await axios.get(url);\r\n        this.recipes = response.data.results;\r\n      } catch (error) {\r\n        console.error('Error fetching recipes:', error);\r\n      }\r\n    },\r\n    viewRecipe(recipeId) {\r\n      // Implement logic to view recipe details\r\n      console.log('View recipe:', recipeId);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n// <script>\r\n// import RecipePreview from \"../components/RecipePreview.vue\";\r\n// import { mockGetRecipesPreview } from \"../services/recipes.js\";\r\n// export default {\r\n//   name: \"RecipePreviewList\",\r\n//   components: {\r\n//     RecipePreview\r\n//   },\r\n//   props: {\r\n//     title: {\r\n//       type: String,\r\n//       required: true\r\n//     }\r\n//   },\r\n//   data() {\r\n//     return {\r\n//       recipes: []\r\n//     };\r\n//   },\r\n//   mounted() {\r\n//     this.updateRecipes();\r\n//   },\r\n//   methods: {\r\n//     async updateRecipes() {\r\n//       try {\r\n//         // const response = await this.axios.get(\r\n//         //   this.$root.store.server_domain + \"/recipes/random\",\r\n//         // );\r\n\r\n//         const amountToFetch = 3; // Set this to how many recipes you want to fetch\r\n//         const response = mockGetRecipesPreview(amountToFetch);\r\n\r\n\r\n//         console.log(response);\r\n//         const recipes = response.data.recipes;\r\n//         console.log(recipes);\r\n//         this.recipes = [];\r\n//         this.recipes.push(...recipes);\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//       }\r\n//     }\r\n//   }\r\n// };\r\n// </script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>"],"mappings":";AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}